{"version":3,"sources":["images/icons/heart.svg","images/icons/gift.svg","images/olaf.png","images/mikke.gif","images/santassled.png","Jumbotron/Jumbotron.jsx","CalendarDay/CalendarDay.jsx","CalendarDayDetail/CalendarDayDetail.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Jumbotron","react_default","a","createElement","className","style","backgroundImage","concat","process","data","coverImage","backgroundSize","minHeight","name","Component","CalendarDay","handleClick","_this$props","_this","props","setActiveDay","id","mainImage","secondaryImage","text","window","history","pushState","_this$props2","this","opened","isOpened","includes","openedClass","onClick","type","src","heartIcon","alt","CalendarDayDetail","resetActiveDay","replaceState","appPath","react_anim_kit_build","left","by","delayBy","giftIcon","App","state","activeDay","handleBack","push","setState","saveStateToLocalStorage","setAppState","getId","calendar","find","item","Number","location","hash","match","join","localStorage","setItem","JSON","stringify","getItemFromLocalStorage","key","getItem","parse","renderDays","map","src_CalendarDay_CalendarDay","Object","assign","_this2","addEventListener","setTimeout","length","removeEventListener","src_Jumbotron_Jumbotron","build","ifTrue","show","olaf","mikke","sled","elseShow","src_CalendarDayDetail_CalendarDayDetail","Boolean","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.47167bb7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/heart.06eb5e33.svg\";","module.exports = __webpack_public_path__ + \"static/media/gift.ce47d7f7.svg\";","module.exports = __webpack_public_path__ + \"static/media/olaf.98806011.png\";","module.exports = __webpack_public_path__ + \"static/media/mikke.f4067853.gif\";","module.exports = __webpack_public_path__ + \"static/media/santassled.5c85065c.png\";","import React, { Component } from 'react';\nimport './Jumbotron.css';\n\nimport data from '../data/data.json';\n\nclass Jumbotron extends Component {\n  render() {\n    return (\n      <div\n        className=\"jumbotron\"\n        style={{\n          backgroundImage: `url(${process.env.PUBLIC_URL}${data.coverImage})`,\n          backgroundSize: 'cover',\n          minHeight: '90vh'\n        }}\n      >\n        <h1>{data.name}s julekalender</h1>\n      </div>\n    );\n  }\n}\nexport default Jumbotron;\n","import React, { Component } from 'react';\nimport './CalendarDay.css';\n\nimport heartIcon from '../images/icons/heart.svg';\n\nclass CalendarDay extends Component {\n  handleClick = () => {\n    const { setActiveDay, id, mainImage, secondaryImage, text } = this.props;\n    window.history.pushState({}, '', `#luke${id}`);\n    setActiveDay({ id, mainImage, secondaryImage, text });\n  };\n\n  render() {\n    const { opened, id } = this.props;\n    const isOpened = opened.includes(id);\n\n    const openedClass = isOpened ? 'calendar-day--opened' : '';\n\n    return (\n      <button className={`calendar-day ${openedClass}`} onClick={this.handleClick} type=\"button\">\n        {!isOpened && this.props.id}\n        {isOpened && <img src={heartIcon} alt=\"heart\" className=\"calendar-day-heart\" />}\n      </button>\n    );\n  }\n}\n\nexport default CalendarDay;\n","import React, { Component } from 'react';\nimport { FadeIn } from 'react-anim-kit';\n\nimport giftIcon from '../images/icons/gift.svg';\n\nimport data from '../data/data.json';\n\nimport './CalendarDayDetail.css';\n\nclass CalendarDayDetail extends Component {\n  handleClick = () => {\n    const { resetActiveDay } = this.props;\n    window.history.replaceState({}, '', data.appPath);\n    resetActiveDay();\n  };\n\n  render() {\n    const { id, mainImage, secondaryImage, text } = this.props;\n    return (\n      <div className=\"calendar-day-detail__container\">\n        <FadeIn left by={300} delayBy={0.3}>\n          <div className=\"calendar-day-detail__inner-container\">\n            <div className=\"calendar-day-detail__box\">\n              <div className=\"calendar-day-detail__left-container\">\n                <h1>Luke {id}</h1>\n                <img\n                  src={process.env.PUBLIC_URL + mainImage}\n                  alt=\"calendar\"\n                  className=\"calendar-day-detail__main-image\"\n                />\n              </div>\n              <div className=\"calendar-day-detail__right-container\">\n                <img src={giftIcon} alt=\"gift\" className=\"calendar-day-detail__gift-icon\" />\n                <p className=\"calendar-detail__text\">{text}</p>\n                <img\n                  src={process.env.PUBLIC_URL + secondaryImage}\n                  alt=\"calendar\"\n                  className=\"calendar-day-detail__secondary-image\"\n                />\n              </div>\n            </div>\n          </div>\n          <button className=\"calendar-day-detail__button\" onClick={this.handleClick}>\n            Tilbake\n          </button>\n        </FadeIn>\n      </div>\n    );\n  }\n}\n\nexport default CalendarDayDetail;\n","import React, { Component } from 'react';\nimport { ConditionallyRender } from 'react-util-kit';\nimport { FadeIn } from 'react-anim-kit';\n\nimport Jumbotron from './Jumbotron/Jumbotron';\nimport CalendarDay from './CalendarDay/CalendarDay';\nimport CalendarDayDetail from './CalendarDayDetail/CalendarDayDetail';\n\nimport './App.css';\n\nimport olaf from './images/olaf.png';\nimport mikke from './images/mikke.gif';\nimport sled from './images/santassled.png';\nimport heartIcon from './images/icons/heart.svg';\n\nimport data from './data/data.json';\n\nclass App extends Component {\n  state = {\n    opened: [],\n    activeDay: null\n  };\n\n  componentDidMount() {\n    window.addEventListener('popstate', this.handleBack);\n\n    const opened = this.getItemFromLocalStorage('opened');\n\n    setTimeout(() => {\n      if (opened && opened.length > 0) {\n        this.setState({ opened });\n      }\n\n      if (window.location.hash !== '') {\n        this.setAppState();\n      }\n    }, 0);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('popstate', this.handleBack);\n  }\n\n  handleBack = () => {\n    this.resetActiveDay();\n    window.history.replaceState({}, '', data.appPath);\n  };\n\n  setActiveDay = activeDay => {\n    const { opened } = this.state;\n\n    const inArray = opened.includes(activeDay.id);\n    if (!inArray) opened.push(activeDay.id);\n\n    this.setState({ activeDay, opened }, this.saveStateToLocalStorage);\n  };\n\n  setAppState = () => {\n    const id = this.getId();\n    const activeDay = data.calendar.find(item => item.id === id);\n    if (activeDay) {\n      this.setState({ activeDay });\n    }\n  };\n\n  getId = () => {\n    return Number(window.location.hash.match(/\\d/gi).join(''));\n  };\n\n  saveStateToLocalStorage = () => {\n    const { opened } = this.state;\n    if (localStorage) {\n      localStorage.setItem('opened', JSON.stringify(opened));\n    }\n  };\n\n  getItemFromLocalStorage = key => {\n    if (localStorage) {\n      const item = localStorage.getItem(key);\n\n      return JSON.parse(item);\n    }\n  };\n\n  resetActiveDay = () => this.setState({ activeDay: null });\n\n  renderDays = () => {\n    return data.calendar.map(item => {\n      return (\n        <CalendarDay\n          key={item.id}\n          {...item}\n          setActiveDay={this.setActiveDay}\n          opened={this.state.opened}\n        />\n      );\n    });\n  };\n\n  render() {\n    const { activeDay } = this.state;\n    return (\n      <div className=\"App\">\n        <Jumbotron />\n        <ConditionallyRender\n          ifTrue={!activeDay}\n          show={\n            <FadeIn left by={300} delayBy={0.1}>\n              <div className=\"app-container\">\n                <img src={olaf} alt=\"olaf\" className=\"app-image-left\" />\n                {this.renderDays()}\n                <img src={mikke} alt=\"olaf\" className=\"app-image-right\" />\n                <div className=\"app-bottom-image__container\">\n                  <img src={sled} alt=\"santas sled\" className=\"app-image-bottom\" />\n                </div>\n                <p className=\"app-made-with__paragraph\">\n                  Made with <img src={heartIcon} alt=\"heart\" />\n                </p>\n              </div>\n            </FadeIn>\n          }\n          elseShow={\n            <CalendarDayDetail {...this.state.activeDay} resetActiveDay={this.resetActiveDay} />\n          }\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}